[package]
name = "confuse"
version = "0.0.4"
edition = "2021"
rust-version = "1.73.0"
description = """
Easily bind structured data from various file formats into schemas and properly typed build-time constants with flexible patterns.
"""
authors = ["orgrinrt <orgrinrt@ikiuni.dev>", "Hiisi Digital Oy <ort@hiisi.digital>"]
license-file = "LICENSE"
readme = "README.md"
keywords = ["toml", "build-time", "constant", "proc-macro"]
categories = ["development-tools", "config"]
documentation = "https://docs.rs/tomlfuse"
homepage = "https://github.com/orgrinrt/tomlfuse"
repository = "https://github.com/orgrinrt/tomlfuse"

[features]
# TODO: should we default to no built-in formats? or all of them? either-or situation I think
default = ["patterns", "alias", "lazy", "advanced_globs"]
# built-in formats
toml = ["dep:toml"]
yaml = [] # TODO: evaluate options for yaml support
json = [] # TODO: evaluate options for json support
ron = [] # TODO: evaluate options for ron support
env_file = [] # TODO: evaluate options for env_file support
# core features
patterns = ["dep:globset"]
alias = []
advanced_globs = ["patterns"]
# optional features
lazy = ["dep:once_cell"]
dyn = [] # TODO: evaluate options for dyn support (just std is valid too)

[dev-dependencies]
tempfile = "3.19.1" # for integration tests

[lib]
proc-macro = true
doctest = false # unfortunately not practical to setup the doc examples with actual toml files to load or even as inlined literals for the content

[dependencies]
toml = { version = "^0.8", optional = true }
proc-macro2 = { version = "^1.0" }
quote = { version = "^1.0" }
syn = { version = "^2.0" }
globset = { version = "^0.4", optional = true }
once_cell = { version = "^1.21", features = ["std"], optional = true }

# NOTE: below metadata is for test purposes only

# this comment should end up in the metadata module's documentation string
[package.metadata]
# this comment should end up in the FOO constant's documentation string
foo = "bar"
#
#
#
# this comment should end up in the defaults module's documentation string
#
# it should handle multiline comments too
[package.metadata.defaults]
# this comment should end up in the VALUE constant's documentation string
# and also it should support multiline
# comments
value = 1
